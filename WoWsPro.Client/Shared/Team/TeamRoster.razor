@inject ITournamentService TournamentService
@inject IUserService UserService
@inject IAccountService AccountService
@inject IAuthorizer Authorizer

<div class="team-roster">
	<div class="team-roster-summary" @onclick="@(e => IsCollapsed = IsCollapsible && !IsCollapsed)">
		@if (Team.Icon is string)
		{
			<img class="team-roster-icon" src="@Team.Icon" />
		}
		<div class="team-roster-info">
			<h3 class="team-roster-info-title">[@(Team.Tag)] @Team.Name</h3>
			<p class="team-roster-info-desc">@Team.Description</p>
		</div>
		@if (CanEdit)
		{
			<div class="grow"></div>
			<NavLink class="team-roster-edit" href="@($"/tournament/{Team.TournamentId}/register/edit/{Team.TeamId}")">
				Edit
			</NavLink>
		}
	</div>
	<div class="team-roster-detail @(!IsCollapsible || !IsCollapsed ? "show" : "hide")">
		<p class="team-roster-prop"><strong>Created:</strong> @Team.Created.ToShortDateString() @Team.Created.ToShortTimeString()</p>
		<p class="team-roster-prop">
			<strong>Team Status:</strong>
			@Team.Status.ToVerb()
			@if (Team.Status == TeamStatus.WaitListed)
			{
				<span>(@WaitListPlace of @WaitListCount)</span>
			}
		</p>
		<table class="team-roster-list">
			<tr class="team-roster-list-header">
				<td></td>
				<td>Nickname</td>
				<td>ID</td>
			</tr>
			@foreach (var player in Team.Participants.Select(p => p.Player).OrderByDescending(p => p?.AccountId == Team.OwnerAccountId).ThenBy(p => p.Nickname))
			{
				<tr class="team-roster-list-item">
					<td class="team-roster-list-item-rep">
						@* TODO: update with new permission system *@
						@if (player?.AccountId == Team.OwnerAccountId)
						{
							<span class="fas fa-crown"></span>
						}
					</td>
					<td>
						@player.Nickname
					</td>
					<td>
						<a target="_blank" href="@GetWowsNumbersUrl(player)">
							@player.PlayerId
							<span class="fas fa-external-link-alt"></span>
						</a>
					</td>
				</tr>
			}
		</table>
	</div>
</div>

@code {
	[Parameter]
	public TournamentTeam Team { get; set; }

	[Parameter]
	public bool IsCollapsible { get; set; }

	bool IsCollapsed { get; set; } = true;

	bool CanEdit { get; set; } = false;

	int WaitListPlace { get; set; }
	int WaitListCount { get; set; }

	protected override async Task OnParametersSetAsync ()
	{
		TournamentService.WaitListRegion = Team.Region;
		var WaitList = await TournamentService.WaitList;
		WaitListPlace = WaitList.IndexOf(Team.TeamId) + 1;
		WaitListCount = WaitList.Count;

		// Guarantee the account is loaded before attempting authorization
		await AccountService.UserAccount.Load;
		CanEdit = Authorizer.HasClaim(new EditTeamInfo(), Team) || Authorizer.HasClaim(new EditTeamRoster(), Team);
	}

	public string GetWowsNumbersUrl (WarshipsPlayer player)
	{
		var subdomain = player.Region.Subdomain() + ".";
		if (subdomain == "eu.")
		{
			subdomain = "";
		}
		return $"https://{subdomain}wows-numbers.com/player/{player.PlayerId},{player.Nickname}/";
	}
}