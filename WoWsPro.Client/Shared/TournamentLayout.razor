@layout MainLayout
@inherits LayoutComponentBase
@inject ITournamentService TournamentService
@implements IDisposable

<div class="tournament-layout">
	@if (Context is not null)
	{
		<div class="tournament-layout-hero">
			<img class="tournament-layout-logo" src="@Context.Icon" />
			<div class="tournament-layout-info">
				<h1 class="tournament-layout-info-title">@Context.Name</h1>
				<p class="tournament-layout-info-desc">@Context.ShortDescription</p>
				<ul class="tournament-layout-info-regionList" aria-label="Regions">
					Regions:
					@foreach (var rules in Context.RegistrationRules)
					{
						<li><RegionBadge Region="rules.Region" /></li>
					}
				</ul>
			</div>
		</div>
		<div class="tournament-layout-nav">
			<ul>
				<li>
					<NavLink href="@($"tournament/{Context.TournamentId}/info")">
						<span>About</span>
					</NavLink>
				</li>
				<li>
					<NavLink href="@($"tournament/{Context.TournamentId}/teams")">
						<span>All Teams</span>
					</NavLink>
				</li>
				<li>
					<NavLink href="@($"tournament/{Context.TournamentId}/join")">
						<span>My Teams</span>
					</NavLink>
				</li>
			</ul>
		</div>
	}
	<div class="tournament-layout-body">
		@Body
	</div>
</div>

@code {
	Tournament Context { get; set; }
	string NavClass { get; set; } = "";

	protected override async Task OnInitializedAsync ()
	{
		TournamentService.Current.Updated += OnCurrentTournamentUpdated;
		Context = await TournamentService.Current;
	}

	void OnCurrentTournamentUpdated (object sender, Tournament tournament)
	{
		Context = tournament;
		StateHasChanged();
	}

	void CloseNav ()
	{
		NavClass = "";
	}

	void OpenNav ()
	{
		NavClass = "show";
	}

	public void Dispose ()
	{
		TournamentService.Current.Updated -= OnCurrentTournamentUpdated;
	}
}