@page "/account"
@inject IUserService UserService
@inject IAccountService AccountService
@inject HttpClient Http 
@implements IDisposable

<Loading Until="AccountLoad" NotNull="Account">
	<div class="dashboard">

		<h1>@User?.PreferredName</h1>
		<p><a href="/account/logout">Sign out</a></p>

		<div class="container">
			<div class="accounts">
				<h2>Warships Accounts</h2>
				<div>
					@foreach (var player in Account.WarshipsAccounts.OrderByDescending(a => a.IsPrimary))
					{
						<div class="account">
							<h3><RegionBadge Region="player.Region" /> @player.Nickname</h3>
							@if (player.IsPrimary)
							{
								<p>This is your primary World of Warships account.</p>
							}
							else
							{
								<button @onclick="@(e => AccountLoad = SetPrimaryWarshipsPlayer(player.PlayerId))">Make Primary</button>
							}
						</div>
					}
					<NavLink class="add-account" href="account/login/wg">
						Add Account
					</NavLink>
				</div>
			</div>

			<div class="accounts">
				<h2>Discord Accounts</h2>
				<div>
					@foreach (var user in Account.DiscordAccounts.OrderByDescending(a => a.IsPrimary))
					{
						<div class="account">
							<h3><span class="fab fa-discord"></span> @($"{user.Username}#{user.Discriminator}")</h3>
							<img src="@DiscordImage.GetUserAvatar(user)" />
							@if (user.IsPrimary)
							{
								<p>This is your primary Discord account.</p>
							}
							else
							{
								<button @onclick="@(e => AccountLoad = SetPrimaryDiscordUser(user.DiscordId))">Make Primary</button>
							}
						</div>
					}
					<NavLink class="add-account" href="account/login/discord">
						@if (Account.DiscordAccounts.Count < 1)
						{
							<span>Link Discord</span>
						}
						else
						{
							<span>Add Account</span>
						}
					</NavLink>
				</div>
			</div>
		</div>

	</div>
</Loading>

@code {
	User User { get; set; }
	Account Account { get; set; }

	Task AccountLoad { get; set; }

	protected override async Task OnInitializedAsync ()
	{
		UserService.User.Updated += OnUserUpdated;
		AccountService.UserAccount.Updated += OnAccountUpdated;

		User = await UserService.User;
		AccountLoad = AccountService.UserAccount.Load;
		Account = await AccountService.UserAccount;
	}

	void OnUserUpdated (object sender, User user)
	{
		User = user;
	}

	void OnAccountUpdated (object sender, Account account)
	{
		Account = account;
	}

	async Task SetPrimaryDiscordUser (long discordId)
	{
		await Http.PostAsAsync("/api/Account/primary/discord", discordId);
		await AccountService.UserAccount.UpdateAsync();
	}

	async Task SetPrimaryWarshipsPlayer (long playerId)
	{
		await Http.PostAsAsync("api/Account/primary/warships", playerId);
		await AccountService.UserAccount.UpdateAsync();
	}

	public void Dispose ()
	{
		UserService.User.Updated -= OnUserUpdated;
		AccountService.UserAccount.Updated -= OnAccountUpdated;
	}
}
