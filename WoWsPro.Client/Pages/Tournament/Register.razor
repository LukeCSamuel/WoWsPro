@page "/tournament/{tournamentId:long}/register"
@inject ITournamentService TournamentService
@inject IAccountService AccountService
@inject NavigationManager Navi
@implements IDisposable

<Loading Until="TournamentLoad" NotNull="Tournament">
	<Loading Until="AccountLoad" NotNull="Account">
		<div class="register">

			@if (Account.GetAcceptedTeam(Tournament) is TournamentTeam team)
			{
				<h2>@team.Region [@team.Tag] @team.Name</h2>
				<p>Your teammates:</p>
				<ul>
					@foreach (var participant in team.Participants)
					{
						<li>@participant.Player.Nickname</li>
					}
				</ul>
				@if (team.OwnerAccountId == Account.AccountId)
				{
					<NavLink href="@($"/tournament/{Tournament.TournamentId}/register/edit/{team.TeamId}")">
						Edit your team &gt;
					</NavLink>
				}
			}
			else
			{
				<h1>
					<NavLink href="@($"/tournament/{Tournament.TournamentId}/register/create")">
						Create a Team &gt;
					</NavLink>
				</h1>
				@foreach (var particpant in Account.GetInvitations(Tournament))
				{
					<h2>@particpant.Team.Region [@particpant.Team.Tag] @particpant.Team.Name</h2>
					<p>@particpant.Status</p>
				}
			}

		</div>
	</Loading>
</Loading>

@code {
	[Parameter]
	public long TournamentId { get; set; }

	Task TournamentLoad { get; set; }
	Tournament Tournament { get; set; }

	Task AccountLoad { get; set; }
	Account Account { get; set; }

	protected override async Task OnInitializedAsync ()
	{
		AccountService.UserAccount.Updated += OnAccountUpdated;

		AccountLoad = AccountService.UserAccount.Load;
		Account = await AccountService.UserAccount;
	}

	protected override async Task OnParametersSetAsync ()
	{
		TournamentLoad = TournamentService.SetCurrentTournamentIdAsync(TournamentId);
		Tournament = await TournamentService.Current;
	}

	void OnAccountUpdated (object sender, Account account)
	{
		Account = account;
	}

	public void Dispose ()
	{
		AccountService.UserAccount.Updated -= OnAccountUpdated;
	}
}
